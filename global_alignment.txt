import numpy as np

def global_alignment(x, y):
    # this piece of code aligns two character strings x and y with match score +1,
    # mismatch score -1, and gap penalty 2 (indel score is -2)

    g = -2;  #gap penalty
    M = len(x)
    N = len(y)

    F = np.zeros((M+1, N+1), dtype=int)
    I = np.zeros((M+1, N+1), dtype=int)
    #F is the matrix with the maximum scores
    #I is the corresponding matrix indicating whether the backward pointing
    #straight-line segments are vertical (3), diagonal (1), or horizontal (2)
    #clear xalign yalign xrev yrev; #the length of these strings is not yet known
    xalign = ''
    yalign = ''
    xrev = ''
    yrev = ''
    #Initial Conditions for matrices F and I:
    for i in range(1,M+1):
        F[i,0] = i*g
        I[i,0] = 3 #I:vertical

    for j in range(1,N+1):
        F[0,j] = j*g
        I[0,j] = 2 #I:horizontal

    # compare sequenses x and y, find maximum-score matrix F
    # and the straight-line segments for traceback of optimal path in matrix I
    for i in range(1,M+1):
        for j in range(1,N+1):
            if x[i-1] == y[j-1]:
                w = 1  # match score is +1
            else:
                w = -1 # mismatch score is -1

            F[i,j] = np.max([F[i-1,j-1]+w,F[i,j-1]+g,F[i-1,j]+g])
            I[i,j] = np.argmax([F[i-1,j-1]+w,F[i,j-1]+g,F[i-1,j]+g])+1

    #traceback:
    xalign = ''
    yalign = ''
    xrev = ''
    yrev = ''
    k = 0
    i = M
    j = N
    while I[i,j] > 0:    #the process will stop at i=j=0 because I[0,0] = 0
        k = k+1
        if I[i,j] == 1:
            i = i-1
            j = j-1
            xrev += x[i]
            yrev += y[j]
        elif I[i,j] == 2:
            j = j-1
            xrev += '-'
            yrev += y[j]
        else:
            i = i-1
            xrev += x[i]
            yrev += '-'

    #reverse arrays for proper display
    xalign = xrev[::-1]
    yalign = yrev[::-1]
    return xalign, yalign, F, I